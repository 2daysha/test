const tg = window.Telegram.WebApp;

class LoyaltyProApp {
    constructor() {
        this.currentPage = 'home';
        this.cart = [];
        this.userData = null;
        this.userPhone = null;
        this.isTelegram = !!tg.initData;
        this.isAuthenticated = false;
        this.init();
    }

    init() {
        console.log('=== Loyalty Pro App –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===');
        
        if (this.isTelegram) {
            tg.expand();
            tg.enableClosingConfirmation();
            console.log('Telegram Web App:', tg.initDataUnsafe);
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            this.loadTelegramUserData();
        } else {
            console.log('–ó–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadSavedData();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (this.isAuthenticated) {
            this.showMainApp();
        } else {
            this.showAuthPage();
        }
    }

    loadTelegramUserData() {
        const user = tg.initDataUnsafe?.user;
        if (user) {
            this.userData = {
                firstName: user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: user.last_name || '',
                username: user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω',
                id: user.id
            };
            
            // –ï—Å–ª–∏ –≤ Telegram –µ—Å—Ç—å –Ω–æ–º–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if (user.phone_number) {
                this.userPhone = user.phone_number;
                this.isAuthenticated = true;
                localStorage.setItem('userPhone', this.userPhone);
                console.log('–ù–æ–º–µ—Ä –∏–∑ Telegram:', this.userPhone);
            }
            
            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.userData);
        }
    }

    loadSavedData() {
        const savedPhone = localStorage.getItem('userPhone');
        if (savedPhone) {
            this.userPhone = savedPhone;
            this.isAuthenticated = true;
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:', this.userPhone);
        }
    }

    showAuthPage() {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—Ä–æ–º–µ auth
        document.querySelectorAll('.page').forEach(page => {
            if (page.id === 'page-auth') {
                page.classList.add('active');
            } else {
                page.classList.remove('active');
            }
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const bottomNav = document.querySelector('.bottom-nav');
        if (bottomNav) bottomNav.style.display = 'none';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.createAuthPageContent();
    }

    createAuthPageContent() {
        const authPage = document.getElementById('page-auth');
        if (!authPage) return;

        authPage.innerHTML = `
            <div class="auth-container">
                <div class="auth-header">
                    <h1>Loyalty Pro</h1>
                    <p>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</p>
                </div>
                
                <div class="auth-content">
                    <div class="auth-icon">
                        <svg width="64" height="64" viewBox="0 0 24 24" fill="#3F75FB">
                            <path d="M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.59l2.2-2.21c.28-.26.36-.65.25-1C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM12 3v10l3-3h6V3h-9z"/>
                        </svg>
                    </div>
                    
                    <div class="auth-info">
                        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</h2>
                        <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</p>
                    </div>
                    
                    <button id="auth-button" class="auth-button">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
                        </svg>
                        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    </button>
                    
                    <div class="auth-note">
                        <p>–ú—ã –∑–∞–ø—Ä–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</p>
                    </div>
                </div>
            </div>
        `;

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        document.getElementById('auth-button').addEventListener('click', () => {
            this.requestPhoneNumber();
        });
    }

    requestPhoneNumber() {
        if (this.isTelegram) {
            this.requestPhoneInTelegram();
        } else {
            this.requestPhoneInBrowser();
        }
    }

    requestPhoneInTelegram() {
    console.log('–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –≤ Telegram...');
        
        miniApp.requestPhoneAccess()
        .then(() => miniApp.requestContact())
        .then(contactData => {
            const phoneNumber = contactData.contact.phoneNumber;
            console.log('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', phoneNumber);
        })
    .catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    });
    }

 
    requestPhoneAccess() {
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–º–µ—Ä—É...');
        
        // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å–ø–æ—Å–æ–± –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ –≤ Telegram Mini Apps
        tg.requestPhoneAccess()
          .then(() => tg.requestContact())
          .then(contactData => {
              const phoneNumber = contactData.contact.phoneNumber;
              console.log('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', phoneNumber);
              
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
              this.handleAuthSuccess(phoneNumber, contactData.contact);
          })
          .catch((error) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
              this.handleAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
          });
    }

    requestContact() {
        console.log('–í—ã–∑—ã–≤–∞–µ–º requestContact...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–µ—Ç–æ–¥ requestContact
        if (typeof tg.requestContact === 'function') {
            tg.requestContact()
                .then(contactData => {
                    console.log('–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω:', contactData);
                    
                    if (contactData && contactData.contact && contactData.contact.phoneNumber) {
                        const phoneNumber = contactData.contact.phoneNumber;
                        console.log('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneNumber);
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
                        this.handleAuthSuccess(phoneNumber, contactData.contact);
                    } else {
                        this.handleAuthError('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞');
                    }
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ requestContact:', error);
                    this.handleAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: ' + error.message);
                });
        } else {
            console.error('–ú–µ—Ç–æ–¥ requestContact –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Telegram Web App');
            this.handleAuthError('–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞');
        }
    }

    requestPhoneInBrowser() {
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...');
        
        const phone = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: +79991234567):', '+79991234567');
        if (phone && this.validatePhone(phone)) {
            this.handleAuthSuccess(phone, {
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            });
        } else if (phone) {
            this.handleAuthError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞');
        } else {
            this.handleAuthError('–ù–æ–º–µ—Ä –Ω–µ –≤–≤–µ–¥–µ–Ω');
        }
    }

    validatePhone(phone) {
        return /^\+7\d{10}$/.test(phone);
    }

    handleAuthSuccess(phone, contact) {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:', phone);
        
        this.userPhone = phone;
        this.isAuthenticated = true;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä
        localStorage.setItem('userPhone', phone);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (contact && (contact.firstName || contact.lastName || contact.first_name || contact.last_name)) {
            this.userData = {
                firstName: contact.firstName || contact.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: contact.lastName || contact.last_name || '',
                username: '–ù–µ —É–∫–∞–∑–∞–Ω',
                id: 'from_contact'
            };
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º MainButton –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω
        if (this.isTelegram && tg.MainButton) {
            tg.MainButton.hide();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        this.showSimpleNotification('–£—Å–ø–µ—Ö!', `–ù–æ–º–µ—Ä ${phone} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        setTimeout(() => {
            this.showMainApp();
        }, 1000);
    }

    handleAuthError(message) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', message);
        this.showSimpleNotification('–û—à–∏–±–∫–∞', message);
    }

    showMainApp() {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        document.getElementById('page-auth').classList.remove('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const bottomNav = document.querySelector('.bottom-nav');
        if (bottomNav) bottomNav.style.display = 'flex';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.initNavigation();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        this.loadUserData();
        this.loadPrivileges();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        this.showPage('home');
    }

    initNavigation() {
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const targetPage = e.currentTarget.dataset.page;
                this.navigateTo(targetPage);
            });
        });
    }

    navigateTo(page) {
        if (!this.isAuthenticated) {
            this.showAuthPage();
            return;
        }
        this.showPage(page);
    }

    showPage(page) {
        if (!this.isAuthenticated) {
            this.showAuthPage();
            return;
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
        
        // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const pageElement = document.getElementById(`page-${page}`);
        if (pageElement) {
            pageElement.classList.add('active');
        }
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navItem = document.querySelector(`[data-page="${page}"]`);
        if (navItem) {
            navItem.classList.add('active');
        }

        this.currentPage = page;
        this.onPageChange(page);
    }

    onPageChange(page) {
        console.log(`–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page}`);
        
        switch(page) {
            case 'home':
                this.loadPrivileges();
                break;
            case 'catalog':
                this.loadCart();
                break;
            case 'cart':
                this.loadProfile();
                break;
        }
    }

    loadUserData() {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ
        if (!this.userData) {
            this.userData = {
                firstName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                lastName: '',
                username: '–ù–µ —É–∫–∞–∑–∞–Ω',
                id: 'unknown'
            };
        }
    }

    loadPrivileges() {
        const container = document.getElementById('page-home');
        if (!container) return;

        const categories = [
            { id: 'all', name: '–í—Å–µ' },
            { id: 'electronics', name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞' },
            { id: 'home', name: '–î–ª—è –¥–æ–º–∞' },
            { id: 'lifestyle', name: '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏' }
        ];

        const products = [
            {
                id: 1, name: "–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è", description: "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ —Å —Ç–∞–π–º–µ—Ä–æ–º",
                price: "2500 –±–æ–Ω—É—Å–æ–≤", numericPrice: 2500, category: "home"
            },
            {
                id: 2, name: "–ù–∞–±–æ—Ä –∫—É—Ö–æ–Ω–Ω—ã—Ö –Ω–æ–∂–µ–π", description: "6 –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
                price: "1800 –±–æ–Ω—É—Å–æ–≤", numericPrice: 1800, category: "home"
            },
            {
                id: 3, name: "Bluetooth –∫–æ–ª–æ–Ω–∫–∞", description: "–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è, 10W",
                price: "3200 –±–æ–Ω—É—Å–æ–≤", numericPrice: 3200, category: "electronics"
            },
            {
                id: 4, name: "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω", description: "–ù–æ–º–∏–Ω–∞–ª 1000 —Ä—É–±–ª–µ–π",
                price: "1000 –±–æ–Ω—É—Å–æ–≤", numericPrice: 1000, category: "lifestyle"
            },
            {
                id: 5, name: "–ß–µ–º–æ–¥–∞–Ω –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö", description: "55–ª, 4 –∫–æ–ª–µ—Å–∞, —á–µ—Ä–Ω—ã–π",
                price: "4500 –±–æ–Ω—É—Å–æ–≤", numericPrice: 4500, category: "lifestyle"
            },
            {
                id: 6, name: "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç", description: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                price: "2800 –±–æ–Ω—É—Å–æ–≤", numericPrice: 2800, category: "electronics"
            }
        ];

        const categoryNames = {
            electronics: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            home: "–î–ª—è –¥–æ–º–∞", 
            lifestyle: "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"
        };

        container.innerHTML = `
            <div class="categories">
                ${categories.map(cat => `
                    <button class="category-btn ${cat.id === 'all' ? 'active' : ''}" data-category="${cat.id}">
                        ${cat.name}
                    </button>
                `).join('')}
            </div>
            <div class="products-grid" id="products-grid">
                ${products.map(product => `
                    <div class="product-card" onclick="app.addToCart(${product.id})">
                        <span class="product-category">${categoryNames[product.category]}</span>
                        <h3>${product.name}</h3>
                        <p>${product.description}</p>
                        <div class="product-price">${product.price}</div>
                    </div>
                `).join('')}
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.querySelectorAll('.category-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const category = e.currentTarget.dataset.category;
                document.querySelectorAll('.category-btn').forEach(b => b.classList.remove('active'));
                e.currentTarget.classList.add('active');
                this.filterProducts(category, products, categoryNames);
            });
        });
    }

    filterProducts(category, products, categoryNames) {
        const grid = document.getElementById('products-grid');
        const filteredProducts = category === 'all' ? products : products.filter(p => p.category === category);
        
        grid.innerHTML = filteredProducts.map(product => `
            <div class="product-card" onclick="app.addToCart(${product.id})">
                <span class="product-category">${categoryNames[product.category]}</span>
                <h3>${product.name}</h3>
                <p>${product.description}</p>
                <div class="product-price">${product.price}</div>
            </div>
        `).join('');
    }

    addToCart(productId) {
        if (!this.isAuthenticated) {
            this.showAuthRequired('–¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É');
            return;
        }

        const products = {
            1: { name: "–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è", price: "2500 –±–æ–Ω—É—Å–æ–≤", numericPrice: 2500, category: "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞" },
            2: { name: "–ù–∞–±–æ—Ä –∫—É—Ö–æ–Ω–Ω—ã—Ö –Ω–æ–∂–µ–π", price: "1800 –±–æ–Ω—É—Å–æ–≤", numericPrice: 1800, category: "–ö—É—Ö–æ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏" },
            3: { name: "Bluetooth –∫–æ–ª–æ–Ω–∫–∞", price: "3200 –±–æ–Ω—É—Å–æ–≤", numericPrice: 3200, category: "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞" },
            4: { name: "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω", price: "1000 –±–æ–Ω—É—Å–æ–≤", numericPrice: 1000, category: "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã" },
            5: { name: "–ß–µ–º–æ–¥–∞–Ω –Ω–∞ –∫–æ–ª–µ—Å–∞—Ö", price: "4500 –±–æ–Ω—É—Å–æ–≤", numericPrice: 4500, category: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" },
            6: { name: "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç", price: "2800 –±–æ–Ω—É—Å–æ–≤", numericPrice: 2800, category: "–ó–¥–æ—Ä–æ–≤—å–µ" }
        };

        const product = products[productId];
        if (!product) return;

        this.cart.push({
            id: Date.now(),
            productId: productId,
            name: product.name,
            price: product.price,
            numericPrice: product.numericPrice,
            category: product.category
        });

        this.showSimpleNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É', `${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
        console.log('–ö–æ—Ä–∑–∏–Ω–∞:', this.cart);
    }

    loadCart() {
        const container = document.getElementById('page-catalog');
        if (!container) return;

        if (this.cart.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px 20px; color: #999;">
                    <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞</p>
                </div>
            `;
            return;
        }

        const total = this.cart.reduce((sum, item) => sum + item.numericPrice, 0);

        container.innerHTML = `
            ${this.cart.map(item => `
                <div class="cart-item">
                    <div class="cart-item-info">
                        <span class="cart-item-category">${item.category}</span>
                        <h3>${item.name}</h3>
                        <div class="cart-item-price">${item.price}</div>
                    </div>
                    <button onclick="app.removeFromCart(${item.id})" class="delete-btn">
                        –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            `).join('')}
            <div class="cart-total">
                <h3>–û–±—â–∞—è —Å—É–º–º–∞</h3>
                <div class="cart-total-price">${total} –±–æ–Ω—É—Å–æ–≤</div>
                <button onclick="app.checkout()" class="checkout-btn">
                    –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                </button>
            </div>
        `;
    }

    removeFromCart(itemId) {
        this.cart = this.cart.filter(item => item.id !== itemId);
        this.loadCart();
        this.showSimpleNotification('–£–¥–∞–ª–µ–Ω–æ', '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
    }

    async checkout() {
        if (!this.isAuthenticated) {
            this.showAuthRequired('–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
            return;
        }

        if (this.cart.length === 0) {
            this.showSimpleNotification('–û—à–∏–±–∫–∞', '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
            return;
        }

        const total = this.cart.reduce((sum, item) => sum + item.numericPrice, 0);
        const confirmed = await this.showConfirm('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', `–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ ${total} –±–æ–Ω—É—Å–æ–≤?`);

        if (confirmed) {
            this.showSimpleNotification('–£—Å–ø–µ—Ö', '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
            this.cart = [];
            this.loadCart();
        }
    }

    loadProfile() {
        const container = document.getElementById('page-cart');
        if (!container) return;

        const stats = {
            availableBonuses: 5000,
            totalOrders: this.cart.length,
            totalSpent: this.cart.reduce((sum, item) => sum + item.numericPrice, 0),
            rate: "Premium"
        };

        container.innerHTML = `
            <div class="profile-info">
                <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 16px;">
                    <svg width="40" height="40" viewBox="0 0 24 24" fill="#3F75FB">
                        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/>
                    </svg>
                    <div>
                        <h3 style="margin: 0; font-size: 18px;">${this.userData.firstName}</h3>
                        <p style="margin: 0; color: #999; font-size: 14px;">–¢–∞—Ä–∏—Ñ: ${stats.rate}</p>
                    </div>
                </div>
                <p><strong>Username:</strong> ${this.userData.username}</p>
                <p><strong>ID:</strong> ${this.userData.id}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${this.userPhone}</p>
                
                <button onclick="app.logout()" class="logout-btn">
                    –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                </button>
            </div>
            
            <div class="profile-stats">
                <div class="stat-card">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="#3F75FB">
                        <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                    </svg>
                    <span class="stat-value">${stats.availableBonuses}</span>
                    <span class="stat-label">–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤</span>
                </div>
                <div class="stat-card">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="#3F75FB">
                        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"/>
                    </svg>
                    <span class="stat-value">${stats.totalOrders}</span>
                    <span class="stat-label">–ó–∞–∫–∞–∑–æ–≤</span>
                </div>
            </div>
            
            <button onclick="app.showSupport()" class="support-btn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"/>
                </svg>
                –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            </button>
        `;
    }

    logout() {
        this.userPhone = null;
        this.isAuthenticated = false;
        localStorage.removeItem('userPhone');
        this.cart = [];
        
        this.showSimpleNotification('–í—ã—Ö–æ–¥', '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        this.showAuthPage();
    }

    showAuthRequired(action) {
        this.showSimpleNotification('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', `–î–ª—è ${action} –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
        setTimeout(() => {
            this.showAuthPage();
        }, 1500);
    }

    showSimpleNotification(title, message) {
        if (this.isTelegram && tg.showPopup) {
            tg.showPopup({
                title: title,
                message: message,
                buttons: [{ type: 'ok' }]
            });
        } else {
            alert(`${title}\n${message}`);
        }
    }

    showConfirm(title, message) {
        return new Promise((resolve) => {
            if (this.isTelegram && tg.showPopup) {
                tg.showPopup({
                    title: title,
                    message: message,
                    buttons: [
                        { type: 'ok', text: '–î–∞' },
                        { type: 'cancel', text: '–ù–µ—Ç' }
                    ]
                }, (buttonId) => {
                    resolve(buttonId === 'ok');
                });
            } else {
                resolve(confirm(`${title}\n${message}`));
            }
        });
    }

    showSupport() {
        this.showSimpleNotification('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new LoyaltyProApp();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
window.app = app;