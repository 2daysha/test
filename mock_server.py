from flask import Flask, jsonify, request
from flask_cors import CORS
import random

app = Flask(__name__)
CORS(app)

# ===== MOCK DATA =====
mock_participant = {
    "id": "b3e94e12-1eac-45fa-9df2-77081c23a90f",
    "phone_number": "+79991234567",
    "balance": 5000,
    "telegram_profile": {"id": "123456789"}
}

mock_categories = [
    {"guid": "1", "name": "–î–ª—è –¥–æ–º–∞"},
    {"guid": "2", "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"},
    {"guid": "3", "name": "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"}
]

mock_products = [
    {
        "guid": "1",
        "name": "–ö–æ—Ñ–µ–≤–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è",
        "stock": "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ñ–µ —Å —Ç–∞–π–º–µ—Ä–æ–º",
        "image_url": "https://picsum.photos/200/200?random=1",
        "price": 2500,
        "is_available": True,
        "category": {"guid": "1", "name": "–î–ª—è –¥–æ–º–∞"}
    },
    {
        "guid": "2",
        "name": "Bluetooth –∫–æ–ª–æ–Ω–∫–∞",
        "stock": "–í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è, 10W",
        "image_url": "https://picsum.photos/200/200?random=2",
        "price": 3200,
        "is_available": True,
        "category": {"guid": "2", "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"}
    },
    {
        "guid": "3",
        "name": "–§–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç",
        "stock": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "image_url": "https://picsum.photos/200/200?random=3",
        "price": 2800,
        "is_available": False,
        "category": {"guid": "2", "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"}
    },
    {
        "guid": "4",
        "name": "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω",
        "stock": "–ù–æ–º–∏–Ω–∞–ª 1000 —Ä—É–±–ª–µ–π",
        "image_url": "https://picsum.photos/200/200?random=4",
        "price": 1000,
        "is_available": True,
        "category": {"guid": "3", "name": "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"}
    }
]


# ===== HELPERS =====

def check_auth_header():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    auth = request.headers.get("Authorization", "")
    if not auth.startswith("tma "):
        return False
    return True


def auth_error():
    return jsonify({"success": False, "message": "–û—à–∏–±–∫–∞ Telegram-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"}), 401


# ===== API TOKEN (–¥–ª—è –±–æ—Ç–∞) =====

@app.route("/api/token/", methods=["POST"])
def get_token():
    """–§–µ–π–∫–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram-–±–æ—Ç–∞"""
    print("üîë POST /api/token/")
    data = request.get_json() or {}
    username = data.get("username", "test_bot")
    password = data.get("password", "secret")

    # –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    return jsonify({
        "access": f"mock_access_token_{username}",
        "refresh": f"mock_refresh_token_{password}",
        "expires_in": 3600
    })


# ===== TELEGRAM MINI APP ROUTES =====

@app.route("/api/telegram/check-telegram-link/", methods=["POST"])
def check_telegram_link():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram"""
    print("üîê POST /api/telegram/check-telegram-link/")

    if not check_auth_header():
        return auth_error()

    # üîß –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º
    response = {
        "success": True,
        "is_linked": True,
        "participant": mock_participant
    }

    return jsonify(response)

@app.route("/api/telegram/link-telegram/", methods=["POST"])
def link_telegram_account():
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    print("üîó POST /api/telegram/link-telegram/")
    data = request.get_json() or {}

    telegram_id = data.get("telegram_id", "unknown")
    phone_number = data.get("phone_number", "+79990000000")

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É
    participant = {
        **mock_participant,
        "phone_number": phone_number,
        "telegram_profile": {"id": telegram_id}
    }

    return jsonify({
        "success": True,
        "message": "Telegram-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω",
        "participant": participant
    }), 200


@app.route("/api/telegram/products/", methods=["GET"])
def get_products():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üõçÔ∏è GET /api/telegram/products/")

    if not check_auth_header():
        return auth_error()

    return jsonify(mock_products)


@app.route("/api/telegram/product-categories/", methods=["GET"])
def get_product_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üìÇ GET /api/telegram/product-categories/")

    if not check_auth_header():
        return auth_error()

    return jsonify(mock_categories)


# ===== GLOBAL HANDLERS =====

@app.errorhandler(500)
def handle_500(error):
    return jsonify({
        "success": False,
        "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
    }), 500


# ===== MAIN =====

if __name__ == "__main__":
    print("üöÄ Mock-—Å–µ—Ä–≤–µ—Ä Telegram Mini App –∑–∞–ø—É—â–µ–Ω!")
    print("üì° –ê–¥—Ä–µ—Å: http://localhost:3001")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("   POST /api/token/")
    print("   POST /api/telegram/check-telegram-link/")
    print("   GET  /api/telegram/products/")
    print("   GET  /api/telegram/product-categories/")
    print("\n‚ö° –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    app.run(host="0.0.0.0", port=3001, debug=True)
